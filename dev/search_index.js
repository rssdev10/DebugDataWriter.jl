var documenterSearchIndex = {"docs":
[{"location":"#DebugDataWriter","page":"DebugDataWriter","title":"DebugDataWriter","text":"","category":"section"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Simple debug data formatter and writer. The package DebugDataWriter.jl provides writing of debug information into external files in a human readable format.","category":"page"},{"location":"#Examples","page":"DebugDataWriter","title":"Examples","text":"","category":"section"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"    id = get_debug_id(\"Some query\")\n\n    @debug_output id \"some complex structure\" ones(2, 3)\n\n    @debug_output id \"some structure as lambda\" begin\n        zeros(5, 2) # here we can put some code for preparing data for output\n    end\n\n\n    matrix = ones(2, 3)\n    @debug_output id \"text table\" ones(2, 3) :JSON\n    @debug_output id \"text table\" ones(2, 3) :TXT\n    @debug_output id \"HTML table\" ones(2, 3) :HTML\n    @debug_output id \"HTML table from variable\" matrix :HTML\n    @debug_output id title matrix :HTML  ","category":"page"},{"location":"#Configuration","page":"DebugDataWriter","title":"Configuration","text":"","category":"section"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Enable saving dumps of data structures. If the output disabled (false), there is no overhead in a program execution","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"DebugDataWriter.config().enable_dump = true","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Enable adding trace info with the @info macro and output into stdout. Each record contains links to the source code and to the saved data file. ","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"DebugDataWriter.config().enable_log = true","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Output in that case looks like here. While using VS Code, just click on that link and open the code line from where that message/data were generated.","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"┌ Info: #= /Users/.../DebugDataWriter/test/runtests.jl:48 =#\n│   debug_id = \"20230330-084712-012_Another_query\"\n│   title = \"text as a text\"\n│   data = \"ones(2, 3)\"\n└   details_fn = \"debug_out/20230330-084712-012_Another_query/text_as_a_text.txt\"","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Additionally, if you are using that option, just click on debug_out/20230330-084712-012_Another_query/text_as_a_text.txt to open that in an editor.","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Date/time prefix for generated directories in an output path. There are two options: full ISO date/time format - 20230330-084712-012_Some_title (default) or just HEX representation of time in seconds like 187310e4a8e_Another_title when path_format_fulltime is false.","category":"page"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"DebugDataWriter.config().path_format_fulltime = false\n","category":"page"},{"location":"#Functions","page":"DebugDataWriter","title":"Functions","text":"","category":"section"},{"location":"","page":"DebugDataWriter","title":"DebugDataWriter","text":"Modules = [DebugDataWriter]","category":"page"},{"location":"#DebugDataWriter.get_debug_id-Tuple{String}","page":"DebugDataWriter","title":"DebugDataWriter.get_debug_id","text":"get_debug_id(title)\n\nGenerates id based on current date/time and the title. id is used as a name of further output sub-directory of debug_out.\n\n\n\n\n\n","category":"method"},{"location":"#DebugDataWriter.get_debug_id-Tuple{}","page":"DebugDataWriter","title":"DebugDataWriter.get_debug_id","text":"get_debug_id()\n\nGenerates id based on current date/time only.\n\n\n\n\n\n","category":"method"},{"location":"#DebugDataWriter.is_debug_output_enabled-Tuple{}","page":"DebugDataWriter","title":"DebugDataWriter.is_debug_output_enabled","text":"Do nothing if DEBUG_OUTPUT environment variable is not defined Enables debug mode if DEBUG_OUTPUT contains log or dump \n\n\n\n\n\n","category":"method"},{"location":"#DebugDataWriter.@ddw_dout-NTuple{4, Any}","page":"DebugDataWriter","title":"DebugDataWriter.@ddw_dout","text":"Do debug output debug_id - name of the directory for the log mode output title - name of the file inside the output directory data_func - source data function fmt - format of ouput. See FORMAT_WRITERS constant.\n\n\n\n\n\n","category":"macro"},{"location":"#DebugDataWriter.@ddw_dout-Tuple{Any, Any, Any}","page":"DebugDataWriter","title":"DebugDataWriter.@ddw_dout","text":"Do debug output debug_id - name of the directory for the log mode output title - name of the file inside the output directory data_func - source data function\n\n\n\n\n\n","category":"macro"},{"location":"#DebugDataWriter.@ddw_get_id-Tuple{Any}","page":"DebugDataWriter","title":"DebugDataWriter.@ddw_get_id","text":"Get debug_id.  The debug_id is used to merge multiple outputs into a single directory with a name starting with debug_id.\n\n\n\n\n\n","category":"macro"},{"location":"#DebugDataWriter.@debug_output-NTuple{4, Any}","page":"DebugDataWriter","title":"DebugDataWriter.@debug_output","text":"@debug_output debug_id title data_or_func fmt\n\n\nSame as [`@debug_output debug_id title data_or_func`](@ref).\nAdditional `fmt` argument specifies an output format. Default is JSON. \nImplemented formats are JSON with JSON.jl, HTML and TXT with PrettyTables.jl,\nand SVG, XML as raw data output.\n\nSee details of the `FORMAT_WRITERS` dictionary\n\n\n\n\n\n","category":"macro"},{"location":"#DebugDataWriter.@debug_output-Tuple{Any, Any, Any}","page":"DebugDataWriter","title":"DebugDataWriter.@debug_output","text":"@debug_output debug_id title data_or_func\n\n`debug_id` in fact is a name of output sub-directory\n\n`title` is used as a name of the output file in that directory\nto distinguish output data. All non alpha-num symbols are translated\ninto the `_` character.\n\n`data_or_func`. The data for debug output might be provided as a literal,\na variable or a lambda function. The lambda-function will be activated\nif only `enable_dump` is true.\n\n\n\n\n\n","category":"macro"}]
}
